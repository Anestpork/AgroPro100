from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from professions import city_areas

TOKEN = "7549868964:AAHN6SkbcGhwpQGisdYgwFu8WmUaS5fMH9w"
# –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º start
async def greet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="start_button")]]
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=InlineKeyboardMarkup(keyboard))

    with open("images/welcome.jpg", "rb") as photo:
        await update.message.reply_photo(photo)


async def start_from_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(area["name"], callback_data=key)]
        for key, area in city_areas.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:",
        reply_markup=reply_markup
        )

# –ü–æ—Ç–æ–º –≤—ã–∑—ã–≤–∞–µ–º start  –≤ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
async def start_from_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ + –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
async def handle_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    area_key = query.data
    area = city_areas[area_key]

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"prof|{area_key}|{name}")]
        for name in area["professions"]
    ]
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º", callback_data="back_to_areas")])

    await query.edit_message_text(
        f"üìç –¢—ã –≤ —Ä–∞–π–æ–Ω–µ {area['name']}\n–í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
async def handle_profession(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, area_key, prof_name = query.data.split("|")

    prof_data = city_areas[area_key]["professions"][prof_name]
    description = prof_data["description"]
    image_path = f"images/{prof_name}.jpg"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    try:
        with open(image_path, "rb") as img:
            await query.message.reply_photo(img, caption=description)
    except FileNotFoundError:
        await query.message.reply_text(description)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    card_text = (
        f"üìå *–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è:\n* {prof_data.get('what_makes', '‚Äî')}\n\n"
        f"üöÄ *–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã:\n* {prof_data.get('perspectives', '‚Äî')}\n\n"
        f"üß† *–ß—Ç–æ –Ω—É–∂–Ω–æ —É–º–µ—Ç—å:\n* {prof_data.get('skills', '‚Äî')}\n\n"
        f"üè¢ *–ì–¥–µ –º–æ–∂–Ω–æ —É—á–∏—Ç—å—Å—è:\n* {prof_data.get('where_study', '‚Äî')}"
    )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º", callback_data=area_key)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º", callback_data="back_to_areas")],
        [InlineKeyboardButton("üé§üì∑ –ò–Ω—Ç–µ—Ä–≤—å—é —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–º",
                              callback_data=f"interview|{area_key}|{prof_name}")]
    ]

    await query.message.reply_text(
        card_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
#–ø–æ–∫–∞–∑ –∏–Ω—Ç—Ä–µ–≤—å—é
async def handle_interview_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, area_key, prof_name = query.data.split("|")

    prof_data = city_areas[area_key]["professions"][prof_name]
    video_url = prof_data.get("video")

    if video_url:
        text = f"üé¨ –ò–Ω—Ç–µ—Ä–≤—å—é —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–º: [—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({video_url})"
    else:
        text = "‚ùó –í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

    await query.message.reply_text(text, parse_mode="Markdown")

    # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    area = city_areas[area_key]
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"prof|{area_key}|{name}")]
        for name in area["professions"]
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º", callback_data="back_to_areas")])

    await query.message.reply_text(
        f"üìç –¢—ã –≤ —Ä–∞–π–æ–Ω–µ {area['name']}\n–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Ä–∞–π–æ–Ω–∞–º" ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤z
async def handle_back_to_areas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(area["name"], callback_data=key)]
        for key, area in city_areas.items()
    ]

    await query.edit_message_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–æ—Ä–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –ê–ü–ö.\n–í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω, —á—Ç–æ–±—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", greet))
    app.add_handler(CallbackQueryHandler(start_from_button, pattern="^start_button$"))
    app.add_handler(CallbackQueryHandler(handle_area, pattern="^(fields|lab|vet|tech)$"))
    app.add_handler(CallbackQueryHandler(handle_profession, pattern=r"^prof\|"))
    app.add_handler(CallbackQueryHandler(handle_back_to_areas, pattern="^back_to_areas$"))
    app.add_handler(CallbackQueryHandler(handle_interview_prompt, pattern=r"^interview\|"))
    app.run_polling()

if __name__ == '__main__':
    main()
